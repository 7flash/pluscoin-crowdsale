const Web3 = require("web3"); // web3@0.20

const providerUrl = "https://ropsten.infura.io";
const web3 = new Web3(new Web3.providers.HttpProvider(providerUrl));

// load crowdsale contract
const crowdsaleAbi = [ { constant: true, inputs: [ { name: "", type: "address" } ], name: "isDeferred", outputs: [ { name: "", type: "bool" } ], payable: false, type: "function" }, { constant: true, inputs: [], name: "maxCallFrequency", outputs: [ { name: "", type: "uint256" } ], payable: false, type: "function" }, { constant: true, inputs: [ { name: "", type: "address" } ], name: "presaleRate", outputs: [ { name: "", type: "uint256" } ], payable: false, type: "function" }, { constant: true, inputs: [], name: "endTime", outputs: [ { name: "", type: "uint64" } ], payable: false, type: "function" }, { constant: true, inputs: [], name: "maxEtherCap", outputs: [ { name: "", type: "uint256" } ], payable: false, type: "function" }, { constant: false, inputs: [], name: "unpause", outputs: [], payable: false, type: "function" }, { constant: true, inputs: [], name: "weiRaised", outputs: [ { name: "", type: "uint256" } ], payable: false, type: "function" }, { constant: true, inputs: [ { name: "", type: "address" } ], name: "presaleGuaranteedLimit", outputs: [ { name: "", type: "uint256" } ], payable: false, type: "function" }, { constant: false, inputs: [], name: "finalize", outputs: [], payable: false, type: "function" }, { constant: false, inputs: [ { name: "beneficiary", type: "address" } ], name: "buyPresaleTokens", outputs: [], payable: true, type: "function" }, { constant: true, inputs: [], name: "maxGuaranteedLimit", outputs: [ { name: "", type: "uint256" } ], payable: false, type: "function" }, { constant: true, inputs: [ { name: "", type: "address" } ], name: "lastCallBlock", outputs: [ { name: "", type: "uint256" } ], payable: false, type: "function" }, { constant: true, inputs: [], name: "paused", outputs: [ { name: "", type: "bool" } ], payable: false, type: "function" }, { constant: true, inputs: [], name: "getRate", outputs: [ { name: "rate", type: "uint256" } ], payable: false, type: "function" }, { constant: true, inputs: [], name: "minEtherCap", outputs: [ { name: "", type: "uint256" } ], payable: false, type: "function" }, { constant: true, inputs: [ { name: "", type: "bool" }, { name: "", type: "address" } ], name: "buyerFunded", outputs: [ { name: "", type: "uint256" } ], payable: false, type: "function" }, { constant: true, inputs: [], name: "startTime", outputs: [ { name: "", type: "uint64" } ], payable: false, type: "function" }, { constant: false, inputs: [ { name: "presaleInvestor", type: "address" }, { name: "presaleAmount", type: "uint256" }, { name: "_presaleRate", type: "uint256" }, { name: "_isDeferred", type: "bool" } ], name: "registerPresale", outputs: [], payable: false, type: "function" }, { constant: false, inputs: [], name: "pause", outputs: [], payable: false, type: "function" }, { constant: true, inputs: [], name: "isFinalized", outputs: [ { name: "", type: "bool" } ], payable: false, type: "function" }, { constant: true, inputs: [], name: "owner", outputs: [ { name: "", type: "address" } ], payable: false, type: "function" }, { constant: false, inputs: [ { name: "beneficiary", type: "address" } ], name: "buyDeferredPresaleTokens", outputs: [], payable: true, type: "function" }, { constant: true, inputs: [], name: "maxReached", outputs: [ { name: "", type: "bool" } ], payable: false, type: "function" }, { constant: true, inputs: [], name: "kyc", outputs: [ { name: "", type: "address" } ], payable: false, type: "function" }, { constant: false, inputs: [], name: "finalizeWhenForked", outputs: [], payable: false, type: "function" }, { constant: false, inputs: [], name: "burnUnpaidTokens", outputs: [], payable: false, type: "function" }, { constant: true, inputs: [], name: "minReached", outputs: [ { name: "", type: "bool" } ], payable: false, type: "function" }, { constant: true, inputs: [ { name: "", type: "uint256" } ], name: "deadlines", outputs: [ { name: "", type: "uint64" } ], payable: false, type: "function" }, { constant: false, inputs: [ { name: "investor", type: "address" } ], name: "claimRefund", outputs: [ { name: "", type: "bool" } ], payable: false, type: "function" }, { constant: true, inputs: [], name: "deferredTotalTokens", outputs: [ { name: "", type: "uint256" } ], payable: false, type: "function" }, { constant: false, inputs: [], name: "buyTokens", outputs: [], payable: true, type: "function" }, { constant: true, inputs: [ { name: "", type: "uint256" } ], name: "rates", outputs: [ { name: "", type: "uint8" } ], payable: false, type: "function" }, { constant: false, inputs: [ { name: "numToRefund", type: "uint256" } ], name: "refundAll", outputs: [], payable: false, type: "function" }, { constant: true, inputs: [], name: "hasEnded", outputs: [ { name: "", type: "bool" } ], payable: false, type: "function" }, { constant: false, inputs: [ { name: "newOwner", type: "address" } ], name: "transferOwnership", outputs: [], payable: false, type: "function" }, { constant: true, inputs: [], name: "vault", outputs: [ { name: "", type: "address" } ], payable: false, type: "function" }, { constant: true, inputs: [], name: "token", outputs: [ { name: "", type: "address" } ], payable: false, type: "function" }, { inputs: [ { name: "_kyc", type: "address" }, { name: "_token", type: "address" }, { name: "_refundVault", type: "address" }, { name: "_devMultisig", type: "address" }, { name: "_reserveWallet", type: "address[5]" }, { name: "_timelines", type: "uint64[6]" }, { name: "_maxEtherCap", type: "uint256" }, { name: "_minEtherCap", type: "uint256" } ], payable: false, type: "constructor" }, { payable: true, type: "fallback" }, { anonymous: false, inputs: [ { indexed: true, name: "purchaser", type: "address" }, { indexed: true, name: "beneficiary", type: "address" }, { indexed: false, name: "value", type: "uint256" }, { indexed: false, name: "amount", type: "uint256" } ], name: "TokenPurchase", type: "event" }, { anonymous: false, inputs: [ { indexed: true, name: "purchaser", type: "address" }, { indexed: true, name: "beneficiary", type: "address" }, { indexed: false, name: "value", type: "uint256" }, { indexed: false, name: "amount", type: "uint256" } ], name: "PresaleTokenPurchase", type: "event" }, { anonymous: false, inputs: [ { indexed: true, name: "purchaser", type: "address" }, { indexed: true, name: "beneficiary", type: "address" }, { indexed: false, name: "value", type: "uint256" }, { indexed: false, name: "amount", type: "uint256" } ], name: "DeferredPresaleTokenPurchase", type: "event" }, { anonymous: false, inputs: [], name: "Finalized", type: "event" }, { anonymous: false, inputs: [ { indexed: true, name: "presaleInvestor", type: "address" }, { indexed: false, name: "presaleAmount", type: "uint256" }, { indexed: false, name: "_presaleRate", type: "uint256" }, { indexed: false, name: "_isDeferred", type: "bool" } ], name: "RegisterPresale", type: "event" }, { anonymous: false, inputs: [], name: "Pause", type: "event" }, { anonymous: false, inputs: [], name: "Unpause", type: "event" } ];

const crowdsaleAddress = "0xf78ab9df126871d39d6473f53b25adfcb27eebe9"; // crowdsale contract address deployed at ropsten network

const crowdsale = web3.eth.contract(crowdsaleAbi).at(crowdsaleAddress);

// load token contract
const tokenAbi = [ { constant: true, inputs: [ { name: "_holder", type: "address" } ], name: "tokenGrantsCount", outputs: [ { name: "index", type: "uint256" } ], payable: false, type: "function" }, { constant: true, inputs: [], name: "mintingFinished", outputs: [ { name: "", type: "bool" } ], payable: false, type: "function" }, { constant: true, inputs: [], name: "name", outputs: [ { name: "", type: "string" } ], payable: false, type: "function" }, { constant: false, inputs: [ { name: "_spender", type: "address" }, { name: "_value", type: "uint256" } ], name: "approve", outputs: [ { name: "", type: "bool" } ], payable: false, type: "function" }, { constant: true, inputs: [], name: "totalSupply", outputs: [ { name: "", type: "uint256" } ], payable: false, type: "function" }, { constant: false, inputs: [ { name: "_from", type: "address" }, { name: "_to", type: "address" }, { name: "_value", type: "uint256" } ], name: "transferFrom", outputs: [ { name: "", type: "bool" } ], payable: false, type: "function" }, { constant: true, inputs: [ { name: "", type: "address" }, { name: "", type: "uint256" } ], name: "grants", outputs: [ { name: "granter", type: "address" }, { name: "value", type: "uint256" }, { name: "cliff", type: "uint64" }, { name: "vesting", type: "uint64" }, { name: "start", type: "uint64" }, { name: "revokable", type: "bool" }, { name: "burnsOnRevoke", type: "bool" } ], payable: false, type: "function" }, { constant: true, inputs: [], name: "decimals", outputs: [ { name: "", type: "uint256" } ], payable: false, type: "function" }, { constant: false, inputs: [], name: "unpause", outputs: [], payable: false, type: "function" }, { constant: false, inputs: [ { name: "_to", type: "address" }, { name: "_amount", type: "uint256" } ], name: "mint", outputs: [ { name: "", type: "bool" } ], payable: false, type: "function" }, { constant: false, inputs: [ { name: "_value", type: "uint256" } ], name: "burn", outputs: [], payable: false, type: "function" }, { constant: true, inputs: [], name: "paused", outputs: [ { name: "", type: "bool" } ], payable: false, type: "function" }, { constant: true, inputs: [ { name: "_holder", type: "address" }, { name: "_grantId", type: "uint256" } ], name: "tokenGrant", outputs: [ { name: "granter", type: "address" }, { name: "value", type: "uint256" }, { name: "vested", type: "uint256" }, { name: "start", type: "uint64" }, { name: "cliff", type: "uint64" }, { name: "vesting", type: "uint64" }, { name: "revokable", type: "bool" }, { name: "burnsOnRevoke", type: "bool" } ], payable: false, type: "function" }, { constant: true, inputs: [ { name: "holder", type: "address" } ], name: "lastTokenIsTransferableDate", outputs: [ { name: "date", type: "uint64" } ], payable: false, type: "function" }, { constant: true, inputs: [ { name: "_owner", type: "address" } ], name: "balanceOf", outputs: [ { name: "balance", type: "uint256" } ], payable: false, type: "function" }, { constant: false, inputs: [], name: "finishMinting", outputs: [ { name: "", type: "bool" } ], payable: false, type: "function" }, { constant: false, inputs: [], name: "pause", outputs: [], payable: false, type: "function" }, { constant: true, inputs: [], name: "owner", outputs: [ { name: "", type: "address" } ], payable: false, type: "function" }, { constant: true, inputs: [], name: "symbol", outputs: [ { name: "", type: "string" } ], payable: false, type: "function" }, { constant: false, inputs: [ { name: "_to", type: "address" }, { name: "_value", type: "uint256" }, { name: "_start", type: "uint64" }, { name: "_cliff", type: "uint64" }, { name: "_vesting", type: "uint64" }, { name: "_revokable", type: "bool" }, { name: "_burnsOnRevoke", type: "bool" } ], name: "grantVestedTokens", outputs: [], payable: false, type: "function" }, { constant: false, inputs: [ { name: "_to", type: "address" }, { name: "_value", type: "uint256" } ], name: "transfer", outputs: [ { name: "", type: "bool" } ], payable: false, type: "function" }, { constant: true, inputs: [ { name: "holder", type: "address" }, { name: "time", type: "uint64" } ], name: "transferableTokens", outputs: [ { name: "", type: "uint256" } ], payable: false, type: "function" }, { constant: true, inputs: [ { name: "_owner", type: "address" }, { name: "_spender", type: "address" } ], name: "allowance", outputs: [ { name: "remaining", type: "uint256" } ], payable: false, type: "function" }, { constant: true, inputs: [ { name: "tokens", type: "uint256" }, { name: "time", type: "uint256" }, { name: "start", type: "uint256" }, { name: "cliff", type: "uint256" }, { name: "vesting", type: "uint256" } ], name: "calculateVestedTokens", outputs: [ { name: "", type: "uint256" } ], payable: false, type: "function" }, { constant: false, inputs: [ { name: "_holder", type: "address" }, { name: "_grantId", type: "uint256" } ], name: "revokeTokenGrant", outputs: [], payable: false, type: "function" }, { constant: false, inputs: [ { name: "newOwner", type: "address" } ], name: "transferOwnership", outputs: [], payable: false, type: "function" }, { anonymous: false, inputs: [ { indexed: true, name: "burner", type: "address" }, { indexed: true, name: "value", type: "uint256" } ], name: "Burn", type: "event" }, { anonymous: false, inputs: [ { indexed: true, name: "from", type: "address" }, { indexed: true, name: "to", type: "address" }, { indexed: false, name: "value", type: "uint256" }, { indexed: false, name: "grantId", type: "uint256" } ], name: "NewTokenGrant", type: "event" }, { anonymous: false, inputs: [], name: "Pause", type: "event" }, { anonymous: false, inputs: [], name: "Unpause", type: "event" }, { anonymous: false, inputs: [ { indexed: true, name: "to", type: "address" }, { indexed: false, name: "amount", type: "uint256" } ], name: "Mint", type: "event" }, { anonymous: false, inputs: [], name: "MintFinished", type: "event" }, { anonymous: false, inputs: [ { indexed: true, name: "owner", type: "address" }, { indexed: true, name: "spender", type: "address" }, { indexed: false, name: "value", type: "uint256" } ], name: "Approval", type: "event" }, { anonymous: false, inputs: [ { indexed: true, name: "from", type: "address" }, { indexed: true, name: "to", type: "address" }, { indexed: false, name: "value", type: "uint256" } ], name: "Transfer", type: "event" } ];

const tokenAddress = "0x2a4c4c9a24fb1fd4e30c5ceb10fd19b2a461fbd5"; // token contract address deployed at ropsten network

const token = web3.eth.contract(tokenAbi).at(tokenAddress);

// sample parameteres
const userAddress = "0xf320CF84c9121E57292516aC2317F4C375c0ac93";
const baseRate = 200;

const currentRate = crowdsale.getRate();
const weiRaised = crowdsale.weiRaised();
const totalSupply = token.totalSupply();
const userTokenBalance = token.balanceOf(userAddress);
const userEthFunded = crowdsale.buyerFunded(false, userAddress).add(crowdsale.buyerFunded(true, userAddress));

// prepare logging
const bonusRate = (currentRate.toNumber() - baseRate) / baseRate;
const toFormatEth = wei => wei.div(1e18).toNumber().toFixed(2);

console.log(`
  bonus rate : ${ bonusRate.toFixed(0) }%
  total eth funded : ${ toFormatEth(weiRaised) }
  plc total supply : ${ toFormatEth(totalSupply) }
  user plc : ${ toFormatEth(userTokenBalance) }
  user eth funded : ${ toFormatEth(userEthFunded) }
`);
